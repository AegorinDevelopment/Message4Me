name: Release Docker Image

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Custom image tag for manual runs (e.g., edge-YYYYMMDD)'
        required: true
        type: string

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Build with Maven (shaded jar)
        run: mvn -B package

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image name (owner/repo, lowercase)
        id: img
        shell: bash
        run: |
          IMAGE="${{ env.REGISTRY }}/$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')"
          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"
          echo "Image: ${IMAGE}"

      - name: Determine image tags
        id: vars
        shell: bash
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "push" ]]; then
            VERSION="${GITHUB_REF_NAME}"
            echo "Resolved release version: ${VERSION}"
            TAGS="${{ steps.img.outputs.image }}:${VERSION},${{ steps.img.outputs.image }}:latest"
          else
            INPUT="${{ github.event.inputs.tag }}"
            echo "Resolved manual tag: ${INPUT}"
            TAGS="${{ steps.img.outputs.image }}:${INPUT},${{ steps.img.outputs.image }}:edge"
          fi
          echo "tags=${TAGS}" >> "$GITHUB_OUTPUT"
          echo "Tags: ${TAGS}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.vars.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
